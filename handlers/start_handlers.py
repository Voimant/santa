import asyncio
import os
from datetime import time, timedelta
import datetime
from distutils.command.check import check

from aiogram import types, Dispatcher, Router, F, Bot
from aiogram.enums import ContentType
from aiogram.filters import CommandStart, Command
from aiogram.types import Message, CallbackQuery
from aiogram.types import FSInputFile, BufferedInputFile
from aiogram.fsm.context import FSMContext
from aiogram.filters.state import State, StatesGroup

from dotenv import load_dotenv

from DB.db_func import db_clear_message_id, db_add_message_id, db_add_new_user, db_check_name_second_name, db_add_name, \
    db_new_room, db_in_group, db_start, check_out_pass
from dell_message import get_dell_message
from keyboards.main_keyboard import main_markup, main_markup_2

router = Router()








@router.message(Command('start'))
async def get_start(mess: Message, state: FSMContext):
    await state.clear()
    check = db_start(mess.from_user.id)
    photo = FSInputFile('i.webp')
    if check is False:
        db_add_new_user(mess.from_user.id)
        photo = FSInputFile('i.webp')
        msg = await mess.answer_photo(photo=photo,caption='–ü—Ä–∏–≤–µ—Ç, —ç—Ç–æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ —Ç–∞–π–Ω–æ–≥–æ –°–∞–Ω—Ç—ã, –¥–ª—è —Ç–µ–±—è –∏ —Ç–≤–æ–∏—Ö –¥—Ä—É–∑–µ–π. –°–æ–∑–¥–∞–π –Ω–æ–≤—É—é –∫–æ–º–Ω–∞—Ç—É –∏–ª–∏ –∑–∞–π–¥–∏ –ø–æ –ø—Ä–∏–≥–ª–∞—Å–∏—Ç–µ–ª—å–Ω–æ–º—É –∫–æ–¥—É,'
                                '–Ω–∞–∂–∞–≤ –Ω–∞ –∫–Ω–æ–ø–∫–∏ –Ω–∏–∂–µ', reply_markup=main_markup)
        await get_dell_message(mess.from_user.id)
        db_clear_message_id(mess.from_user.id)
        db_add_message_id(mess.from_user.id, str(msg.message_id))
        await mess.delete()
    elif check is True:
        try:

            msg = await mess.answer_photo(photo=photo, caption=f'C –≤–æ–∑–≤—Ä–∞—â–µ–Ω–∏–µ–º, {db_in_group(mess.from_user.id)}', reply_markup=main_markup_2)
        except Exception as e:
            msg = await mess.answer_photo(photo=photo,caption='–° –≤–æ–∑–≤—Ä–∞—â–µ–Ω–∏–µ–º, –≤—ã –µ—â–µ –Ω–µ –≤–æ—à–ª–∏ –Ω–∏ –≤ –æ–¥–Ω—É –∫–æ–º–Ω–∞—Ç—É', reply_markup=main_markup)
        await get_dell_message(mess.from_user.id)
        db_clear_message_id(mess.from_user.id)
        db_add_message_id(mess.from_user.id, str(msg.message_id))
        await mess.delete()


class FsmName(StatesGroup):
    name = State()
    second_name = State()


class FsmRoom(StatesGroup):
    name = State()
    passwod = State()

@router.callback_query(F.data == 'new_room')
async def get_new_room(call: CallbackQuery, state: FSMContext):
    check_name = db_check_name_second_name(call.from_user.id)[0]
    if check_name['name'] is None:
        msg = await call.message.answer('–î–∞–≤–∞–π –ø–æ–∑–Ω–∞–∫–æ–º–∏–º—Å—è, –∫–∞–∫ —Ç–µ–±—è –∑–æ–≤—É—Ç?\n –ú–æ–∂–µ—à—å –¥–æ–±–∞–≤–∏—Ç—å –∫ —Å–≤–æ–µ–º—É –∏–º–µ–Ω–∏ —Å–º–∞–π–ª–∏–∫–æ–≤\n'
                                        ' *–í–í–ï–î–ò–¢–ï –°–í–û–ï –ò–ú–Ø, –ù–ï –ö–û–î –ö–û–ú–ù–ê–¢–´* :)', parse_mode='Markdown')
        await state.set_state(FsmName.name)
        await get_dell_message(call.from_user.id)
        db_clear_message_id(call.from_user.id)
        db_add_message_id(call.from_user.id, str(msg.message_id))
    else:
        msg = await call.message.answer('–ö–∞–∫ –Ω–∞–∑–æ–≤–µ–º —Ç–≤–æ—é –∫–æ–º–Ω–∞—Ç—É?')
        await state.set_state(FsmRoom.name)
        await get_dell_message(call.from_user.id)
        db_clear_message_id(call.from_user.id)
        db_add_message_id(call.from_user.id, str(msg.message_id))

@router.message(FsmName.name, F.content_type == ContentType.TEXT)
async def get_name(mess: Message, state: FSMContext):
    if mess.text is not None:
        db_add_name(mess.from_user.id, mess.text)
        await state.clear()
        msg = await mess.answer('–ö–∞–∫ –Ω–∞–∑–æ–≤–µ–º —Ç–≤–æ—é –∫–æ–º–Ω–∞—Ç—É?')
        await state.set_state(FsmRoom.name)
        await get_dell_message(mess.from_user.id)
        db_clear_message_id(mess.from_user.id)
        db_add_message_id(mess.from_user.id, str(msg.message_id))
        await mess.delete()


@router.message(FsmRoom.name, F.content_type == ContentType.TEXT)
async def get_name(mess: Message, state: FSMContext):
    if mess.text is not None:
        await state.update_data(name=mess.text)

    msg = await mess.answer('–ê —Ç–µ–ø–µ—Ä—å –ø—Ä–∏–¥—É–º–∞–π –°–ï–ö–†–ï–¢–ù–´–ô –ö–û–î –∏ –∑–∞–ø–∏—à–∏ –µ–≥–æ!')
    await state.set_state(FsmRoom.passwod)
    await get_dell_message(mess.from_user.id)
    db_clear_message_id(mess.from_user.id)
    db_add_message_id(mess.from_user.id, str(msg.message_id))
    await mess.delete()


@router.message(FsmRoom.passwod, F.content_type == ContentType.TEXT)
async def get_pass(mess: Message, state: FSMContext):
    check = check_out_pass(mess.text)
    print(check)
    if check is None:
        if mess.text is not None:
            data = await state.get_data()
            check_and_update = db_new_room(mess.from_user.id, data['name'], mess.text)
            if check_and_update is True:
                await state.clear()
                msg = await mess.answer(f'–í—ã —Å–æ–∑–¥–∞–ª–∏ –∫–æ–º–Ω–∞—Ç—É {data["name"]}, –ø–∞—Ä–æ–ª—å {mess.text}, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –ø—Ä–∏–≥–ª–∞—Å–∏—Ç–µ–ª—å–Ω—ã–π –∫–æ–¥ –¥—Ä—É–∑—å—è–º! –Ω–µ –∑–∞–±—É–¥—å—Ç–µ –∑–∞–ø–∏—Å–∞—Ç—å.', reply_markup=main_markup_2)
                await get_dell_message(mess.from_user.id)
                db_clear_message_id(mess.from_user.id)
                db_add_message_id(mess.from_user.id, str(msg.message_id))
                await mess.delete()
            else:
                msg = await mess.answer(
                    f'–¢–∞–∫–∞—è –∫–æ–º–Ω–∞—Ç–∞ —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ')

                await get_dell_message(mess.from_user.id)
                db_clear_message_id(mess.from_user.id)
                db_add_message_id(mess.from_user.id, str(msg.message_id))
                await state.clear()
                await state.set_state(FsmRoom.name)
                await mess.delete()
    else:
        msg = await mess.answer(
            f'–¢–∞–∫–æ–π —Å–µ–∫—Ä–µ—Ç–Ω—ã–π –∫–æ–¥ —É–∂–µ –µ—Å—Ç—å, –ø—Ä–∏–¥—É–º–∞–π—Ç–µ –¥—Ä—É–≥–æ–π')

        await get_dell_message(mess.from_user.id)
        db_clear_message_id(mess.from_user.id)
        db_add_message_id(mess.from_user.id, str(msg.message_id))
        await state.set_state(FsmRoom.passwod)
        await mess.delete()



@router.message(FsmName.name)
async def error_name(mess: Message, state: FSMContext):
    msg = await mess.answer('–í–≤–æ–¥–∏—Ç—å –º–æ–∂–Ω–æ –±—É–∫–≤—ã, —Ü–∏—Ñ—Ä—ã –∏ —Å–º–∞–π–ª–∏–∫–∏, –≤–≤–µ–¥–∏ —Å–Ω–æ–≤–∞!')
    await get_dell_message(mess.from_user.id)
    db_clear_message_id(mess.from_user.id)
    db_add_message_id(mess.from_user.id, str(msg.message_id))
    await state.set_state(FsmName.name)
    await mess.delete()


@router.message(FsmRoom.name)
async def error_name(mess: Message, state: FSMContext):
    msg = await mess.answer('–í–≤–æ–¥–∏—Ç—å –º–æ–∂–Ω–æ –±—É–∫–≤—ã, —Ü–∏—Ñ—Ä—ã –∏ —Å–º–∞–π–ª–∏–∫–∏, –≤–≤–µ–¥–∏ —Å–Ω–æ–≤–∞!')
    await get_dell_message(mess.from_user.id)
    db_clear_message_id(mess.from_user.id)
    db_add_message_id(mess.from_user.id, str(msg.message_id))
    await state.set_state(FsmRoom.name)
    await mess.delete()


@router.message(FsmRoom.passwod)
async def error_name(mess: Message, state: FSMContext):
    msg = await mess.answer('–í–≤–æ–¥–∏—Ç—å –º–æ–∂–Ω–æ –±—É–∫–≤—ã, —Ü–∏—Ñ—Ä—ã –∏ —Å–º–∞–π–ª–∏–∫–∏, –≤–≤–µ–¥–∏ —Å–Ω–æ–≤–∞!')
    await get_dell_message(mess.from_user.id)
    db_clear_message_id(mess.from_user.id)
    db_add_message_id(mess.from_user.id, str(msg.message_id))
    await state.set_state(FsmRoom.passwod)
    await mess.delete()


@router.callback_query(F.data == 'cancel')
async def get_start(call: CallbackQuery, state: FSMContext):
    await state.clear()
    db_add_new_user(call.from_user.id)
    check = db_start(call.from_user.id)
    if check is False:
        msg = await call.message.answer('–ü—Ä–∏–≤–µ—Ç, —ç—Ç–æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ —Ç–∞–π–Ω–æ–≥–æ —Å–∞–Ω—Ç—ã, –¥–ª—è —Ç–µ–±—è –∏ —Ç–≤–æ–∏—Ö –¥—Ä—É–∑–µ–π. –°–æ–∑–¥–∞–π –Ω–æ–≤—É—é –∫–æ–º–Ω–∞—Ç—É –∏–ª–∏ –∑–∞–π–¥–∏ –ø–æ –ø—Ä–∏–≥–ª–∞—Å–∏—Ç–µ–ª—å–Ω–æ–º—É –∫–æ–¥—É,'
                                '–Ω–∞–∂–∞–≤ –Ω–∞ –∫–Ω–æ–ø–∫–∏ –Ω–∏–∂–µ', reply_markup=main_markup)
        await get_dell_message(call.from_user.id)
        db_clear_message_id(call.from_user.id)
        db_add_message_id(call.from_user.id, str(msg.message_id))
        await call.message.delete()
    elif check is True:
        try:
            msg = await call.message.answer(f'C –≤–æ–∑–≤—Ä–∞—â–µ–Ω–∏–µ–º, {db_in_group(call.from_user.id)}', reply_markup=main_markup_2)
        except Exception as e:
            msg = await call.message.answer(f'C –≤–æ–∑–≤—Ä–∞—â–µ–Ω–∏–µ–º, —Å–∫–æ—Ä–µ–µ –∑–∞—Ö–æ–¥–∏ –∏–ª–∏ —Å–æ–∑–¥–∞–≤–∞–π –∫–æ–º–∞–Ω–∞—Ç—ã!\n –î—Ä—É–∑—å—è —É–∂–µ –∂–¥—É—Ç –≤–∞—Å.',
                                            reply_markup=main_markup)
        await get_dell_message(call.from_user.id)
        db_clear_message_id(call.from_user.id)
        db_add_message_id(call.from_user.id, str(msg.message_id))
        await call.message.delete()


@router.callback_query(F.data == 'help_razrab')
async def get_help(call: CallbackQuery, state: FSMContext):
    await state.clear()
    photo = FSInputFile('my_gift.webp')
    text = ('‚ù§Ô∏èüéÅüåü –ï—Å–ª–∏ –≤–∞–º –ø–æ–Ω—Ä–∞–≤–∏–ª–æ—Å—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –ø–æ–¥–¥–µ—Ä–∂–∏—Ç–µ —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–∞ –Ω–∞ –ª—é–±—É—é —Å—É–º–º—É –Ω–∏–∂–µ, –æ–Ω —Ç–æ–∂–µ —Ö–æ—á–µ—Ç –Ω–æ–≤—ã–π –≥–æ–¥\n'
            '[–æ—Ç–ø—Ä–∞–≤–∏—Ç—å –ø–æ–¥–∞—Ä–æ–∫ —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫—É](https://www.tbank.ru/cf/5SxKISnK6Cj)')
    msg = await call.message.answer_photo(photo=photo, caption=text, parse_mode='Markdown', reply_markup=main_markup_2)
    await get_dell_message(call.from_user.id)
    db_clear_message_id(call.from_user.id)
    db_add_message_id(call.from_user.id, str(msg.message_id))